openapi: 3.0.3
info:
  title: Example Payments API (MVP)
  version: "1.0.0"
  description: |
    Backend MVP API. All endpoints require Bearer token authentication.
    Dates/times use ISO 8601 in UTC.
servers:
  - url: https://api.example.com/v1
security:
  - bearerAuth: []
tags:
  - name: Auth
    description: Authentication and user session
  - name: Users
  - name: Transfers
paths:
  /me:
    get:
      tags: [Auth]
      summary: Get current user's profile and account
      operationId: getMe
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeResponse'
              examples:
                example:
                  value:
                    user:
                      id: 1
                      name: Taro
                      icon: u1.png
                    account:
                      account_number: "12345678"
                      deposit: 10000
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /users:
    get:
      tags: [Users]
      summary: List users (recipients)
      operationId: listUsers
      parameters:
        - $ref: '#/components/parameters/ExcludeParam'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                example:
                  value:
                    - { id: 2, name: Hanako, icon: u2.png }
                    - { id: 3, name: Jiro,   icon: u3.png }
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /users/{user_id}:
    get:
      tags: [Users]
      summary: Get recipient user details
      operationId: getUserById
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Target user ID.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailResponse'
              examples:
                example:
                  value:
                    user: { id: 2, name: Hanako, icon: u2.png }
                    account: { account_number: "98765432" }
        "400":
          description: Invalid user id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                INVALID_USER_ID:
                  value: { error_code: "INVALID_USER_ID", message: "user_id must be a positive integer" }
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                USER_NOT_FOUND:
                  value: { error_code: "USER_NOT_FOUND", message: "User was not found" }
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /transfers:
    get:
      tags: [Transfers]
      summary: List transfer history (optional)
      operationId: listTransfers
      parameters:
        - $ref: '#/components/parameters/DirectionParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transfer'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      tags: [Transfers]
      summary: Create a transfer
      operationId: createTransfer
      parameters:
        - name: Idempotency-Key
          in: header
          required: false
          description: Recommended to ensure idempotent POST /transfers. Use a UUID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferCreateRequest'
            examples:
              example:
                value:
                  to_user_id: 2
                  amount: 5000
                  message: "ランチ代ありがとう！"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
              examples:
                example:
                  value:
                    id: 1001
                    from_user_id: 1
                    to_user_id: 2
                    amount: 5000
                    message: "ランチ代ありがとう！"
                    date: "2025-09-01T10:00:00Z"
                    completed: true
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                INVALID_AMOUNT:
                  value: { error_code: "INVALID_AMOUNT", message: "Amount must be a positive integer" }
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                USER_NOT_FOUND:
                  value: { error_code: "USER_NOT_FOUND", message: "Recipient user not found" }
        "409":
          description: Insufficient funds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                INSUFFICIENT_FUNDS:
                  value: { error_code: "INSUFFICIENT_FUNDS", message: "Insufficient balance" }
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        default:
          $ref: '#/components/responses/ErrorResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    ExcludeParam:
      name: exclude
      in: query
      required: false
      description: Exclude self from results by passing `exclude=self`.
      schema:
        type: string
        enum: [self]
    DirectionParam:
      name: direction
      in: query
      required: false
      description: Filter by direction.
      schema:
        type: string
        enum: [sent, received]
    LimitParam:
      name: limit
      in: query
      required: false
      description: Max number of items to return.
      schema:
        type: integer
        default: 20
        minimum: 1
        maximum: 100
  responses:
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            UNAUTHORIZED:
              value: { error_code: "UNAUTHORIZED", message: "Missing or invalid token" }
    ErrorResponse:
      description: Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      required: [error_code, message]
      properties:
        error_code:
          type: string
          description: Machine-readable error code.
        message:
          type: string
          description: Human-readable error message.
    User:
      type: object
      required: [id, name, icon]
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        icon:
          type: string
          description: File name of the stored user icon.
    Account:
      type: object
      required: [account_number, deposit]
      properties:
        account_number:
          type: string
        deposit:
          type: integer
          description: Deposit amount in JPY (integer).
          example: 10000
    AccountPublic:
      type: object
      required: [account_number]
      properties:
        account_number:
          type: string
    Transfer:
      type: object
      required: [id, from_user_id, to_user_id, amount, date, completed]
      properties:
        id:
          type: integer
          format: int32
        from_user_id:
          type: integer
          format: int32
        to_user_id:
          type: integer
          format: int32
        amount:
          type: integer
          description: Transfer amount in JPY (integer).
        message:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
          description: ISO 8601, UTC
        completed:
          type: boolean
    MeResponse:
      type: object
      required: [user, account]
      properties:
        user:
          $ref: '#/components/schemas/User'
        account:
          $ref: '#/components/schemas/Account'
    UserDetailResponse:
      type: object
      required: [user, account]
      properties:
        user:
          $ref: '#/components/schemas/User'
        account:
          $ref: '#/components/schemas/AccountPublic'
    TransferCreateRequest:
      type: object
      required: [to_user_id, amount]
      properties:
        to_user_id:
          type: integer
          format: int32
        amount:
          type: integer
          minimum: 1
          description: Amount in JPY (integer).
        message:
          type: string
          nullable: true
